(defvar *data*)

(defun scan ()
  (let ((m (make-array '(50 50))))
    (dotimes (i 50)
      (dotimes (j 50)
        (setf (aref m i j)
              (ecase (elt (elt *data* j) i)
                (#\. 'open)
                (#\| 'tree)
                (#\# 'lumber)))))
    m))

(defun adjacent (m x y)
  (let ((result '()))
    (loop for x1 from (1- x) to (1+ x)
          do (loop for y1 from (1- y) to (1+ y)
                   when (and (not (and (= x1 x) (= y1 y)))
                             (>= x1 0) (< x1 50)
                             (>= y1 0) (< y1 50))
                     do (push (aref m x1 y1) result)))
    result))

(defun one-step (m)
  (let ((next (make-array '(50 50))))
    (dotimes (x 50)
      (dotimes (y 50)
        (let ((neighbors (adjacent m x y)))
          (setf (aref next x y)
                (case (aref m x y)
                     (open (if (>= (count 'tree neighbors) 3)
                               'tree
                               'open))
                     (tree (if (>= (count 'lumber neighbors) 3)
                               'lumber
                               'tree))
                     (lumber (if (and (member 'lumber neighbors)
                                      (member 'tree neighbors))
                                 'lumber
                                 'open)))))))
    next))

(defun n-step (m n)
  (do ((i 0 (1+ i))
       (m m (one-step m)))
      ((= i n) m)))

(defun value (m)
  (let ((trees 0)
        (lumbers 0))
    (dotimes (x 50)
      (dotimes (y 50)
        (case (aref m x y)
          (tree (incf trees))
          (lumber (incf lumbers)))))
    (* trees lumbers)))

(defun adv18 ()
  (value (n-step (scan) 10)))

(defun eqmap (m1 m2)
  (dotimes (x 50)
    (dotimes (y 50)
      (unless (eq (aref m1 x y)
                  (aref m2 x y))
        (return-from eqmap nil))))
  t)

(defun cycle (start)
  (do ((i 1 (1+ i))
       (m (one-step start) (one-step m)))
      ((eqmap start m) i)))

(defun adv18b ()
  (let* ((offset 1000)
         (start (n-step (scan) offset))
         (n (cycle start)))
    (value (n-step start (mod (- 1000000000 offset) n)))))

;;; For debug - nice spiral images!
(defun show-map (m)
  (dotimes (y 50)
    (dotimes (x 50)
      (case (aref m x y)
        (open (format t "."))
        (tree (format t "|"))
        (lumber (format t "#"))))
    (terpri))
  (format t "~%"))

;;; Data

(defparameter *data*
  '("..##|#.##..|#...|.#|....#|.#......|#......#|....|."
    "..#|.#.#|..#.|...|.|.|....|..|||||..#|..#.#..|##.|"
    ".||.....#..#.....|||#|.....#|###|||.|..#...#..|##."
    "#|...|#|.......##.|......####.|..||#....##||.#...#"
    "..|.##|#.|.#||#....#||...|#.||.|....|.|#|.#...#.#."
    "#..|......#..#....|||.||..#..#..#.|.|.|#.||.....#."
    "|.|...#|..|#|.|....#...#.|.#||.....#........||..|."
    ".#|##.|...|......|.#||#|#..|.|....|....|||...#####"
    ".|.......#....##|.#.#...|.||.....#|.|#.......|##|."
    ".#....#|##|..##|..#.|...##.|#.##..#.......||.|.|##"
    "###..#||........#...#..#..|......||.......#.|#|#.."
    ".||.#.....|.#...|......#.||##||......|...||.||...."
    "..#|.|....#.#.|||#...#.....#.#.#.|....#.|...|#...."
    "#...|..#.|.|...#|..#.|#...|.......#.|.......|.###."
    ".|#|.#.|..#|....|..|..#..#|......#..#..|.#...|.|#."
    ".#...#......#|||..|.|.....#....|#.||.....#||##..|."
    "|.|...#||..|........#.....|#....|...||..##.#.#.|.."
    ".....|......######|...|.....##.........|#|.#|....."
    "|..|.......|#|.##.|..|....#....##..||..|...|..|..."
    ".||||#....|..|.|#|..|...#.|#.|.....|.||.||#...|..."
    ".#|#..###.#|....#..||...|##..#.#|..#..|||........#"
    "..|.#.....#|..|.#..|...#||......##.|....|.|#.|.|||"
    "..#.......|#||..|...|.....##..#.#.####..|......#|#"
    ".|##......|#....|..|.||...##|#....##||#.#|#.#..#.|"
    "#..#..|..#....|..|....##..|..#....##.#|#|##|#|...."
    "|####..#....|..|..|....|#.|....|.....##.##.#|....|"
    "..||...##..|...#|##..|.##......#...##.|....#.|...#"
    ".#...|#.|#|.....|#|....##.|.........|.......|.#..."
    "||...###...|#..###|..|.#.|#||...#...#|.....|##|..|"
    "#.#.#|....#|#..|..........|#..#|.|#||...|##.##.|#."
    "....|.##..#...#..##|..|....|..||#.|..|..#..#......"
    ".|.#..|.#...||..#..|.|...#....|.||#.|#.....||.|..."
    "..#|||.#..|#|...||#.|....|.#...#||||#...#...|...|#"
    "..#..#....#|.............##...|..#..#..||##|..#.||"
    "#....#|...#..##....###..||..#||...|.#..|.....|...."
    "....|..#...#...||..||....|#|#|.|..|.#.|..|.##..|#."
    "..#.....|....||.##..#..#|..|.|#.....|...|..|..#..#"
    ".##.||.#||..#|.#....||.|.....#|.....#....||..#.##|"
    "..|.#|.|...|........#......|.##.|#.#..|......##..."
    ".##||.|.##....|...##.#.....#.##.##..#...|||#|#.|.|"
    "....|||..|....#..#.#..|.|.|....#.|#.#.##|.|#.#|.#."
    "..|...#|#....##.#|##.#.||##...#.|#..##.....#...#.."
    ".|#..#.....|...|.#..##......|..#.|.......#.....#.."
    ".#..|.#..|#...#....|..||.|..#..#...##........#...."
    ".|.##.#|.#.#.|..||##|..||||.##|||..#..##...|..#|#."
    "#.......#...|#.|#||..|.##...#...|....|...##....#.|"
    ".###..|......||#...|..||||#....|.||...#....|.#...|"
    ".|.#...|#..|.....#......|.......|.........|.#.#..."
    "|.|...#...|#|||...|||....|#..|#...#.#..#...|....#|"
    "|#...#..#.|#|.#..#.#.....|.|.##...#.|#..|.#|..#..."))

  0 r5 = 123
> 1 r5 &= 456
  2 r5 = r5 == 72
  3 reljmp r5  (if 123 & 456 == 72 then jmp 5)
  4 jmp 1
> 5 r5 = 0
> 6 r3 = r5 | 0x10000
  7 r5 = 0x7f493
> 8 r4 = r3 & 0xff
  9 r5 += r4
 10 r5 &= 0xffffff
 11 r5 *= 0x1016b
 12 r5 &= 0xffffff
 13 r4 = 0x100 > r3
 14 reljmp r4  (if r3 < 0x100 then jmp 16)
 15 jmp 17
>16 jmp 28
>17 r4 = 0
>18 r2 = r4 + 1
 19 r2 *= 0x100
 20 r2 = r2 > r3
 21 reljmp r2  (if r2 > r3 then jmp 23)
 22 jmp 24
>23 jmp 26
>24 r4++
 25 jmp 18
>26 r3 = r4
 27 jmp 8
>28 r4 = r5 == r0
 29 reljmp r4  (if r5 == r0 then halt)
 30 jmp 6

So we need r0 to be the same as r5 when the program reaches line 28.

For the second part, we need to know what it does:

start:
r3 = r5 | 0x10000
r5 = 0x7f493
loop:
r5 = (((r5 + (r3 & 0xff)) & 0xffffff) * 0x1016b) & 0xffffff
if r3 < 0x100
  if r5 == r0
    halt
  else
    jmp start
else
  for r4 = 0; (r4 + 1) * 0x100 <= r3; ++r4
  r3 = r4   // r3 >>= 8
  jmp loop

Functionally:

f r3 r5 | r3 < 0x100 = if next == r0 then halt
                       else f (next | 0x10000) 0x7f493
        | otherwise  = f (r3 >> 8) next
  where next = (((r5 + (r3 & 0xff)) & 0xffffff) * 0x1016b) & 0xffffff

f 0x10000 0x7f493

Note that if a candidate for r0 is repeated,
then all subsequent numbers will also be repeated,
so we should just look for the first repetition.

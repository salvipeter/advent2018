(defparameter *depth* 4080)
(defparameter *target* '(14 . 785))

(let ((cache (make-hash-table :test #'equal)))
  (defun geologic-index (x y)
    (or (gethash (cons x y) cache)
        (setf (gethash (cons x y) cache)
              (cond ((equal (cons x y) *target*) 0)
                    ((zerop x) (* y 48271))
                    ((zerop y) (* x 16807))
                    (t (* (erosion-level (1- x) y)
                          (erosion-level x (1- y)))))))))

(defun erosion-level (x y)
  (mod (+ (geologic-index x y) *depth*) 20183))

(defun adv22 ()
  (loop for x from 0 to (car *target*)
        sum (loop for y from 0 to (cdr *target*)
                  sum (mod (erosion-level x y) 3))))

(defun get-type (pos)
  (mod (erosion-level (car pos) (cdr pos)) 3))

(defun change-gear (gear from to)
  (let ((from-type (get-type from))
        (to-type (get-type to)))
    (if (= from-type to-type)
        gear
        (cond ((and (= from-type 0) (= to-type 1)) 'climbing)
              ((and (= from-type 0) (= to-type 2)) 'torch)
              ((and (= from-type 1) (= to-type 0)) 'climbing)
              ((and (= from-type 1) (= to-type 2)) 'neither)
              ((and (= from-type 2) (= to-type 0)) 'torch)
              ((and (= from-type 2) (= to-type 1)) 'neither)))))

(defun add (u v)
  (cons (+ (car u) (car v))
        (+ (cdr u) (cdr v))))

;;; Slow-ish (~40s)
(defun adv22b ()
  (let ((distances (make-hash-table :test #'equal))
        (best most-positive-fixnum))
    (labels ((rec (todo)
               (let ((next '()))
                 (dolist (current todo)
                   (destructuring-bind (pos . gear)
                       current
                     (when (equal pos *target*)
                       (let ((better (+ (gethash current distances)
                                        (if (eq gear 'torch) 0 7))))
                         (when (< better best)
                           (setf best better
                                 (gethash (cons *target* 'torch) distances) better))))
                     (dolist (d '((1 . 0) (0 . 1) (-1 . 0) (0 . -1)))
                       (let ((new-pos (add pos d)))
                         (when (and (>= (car new-pos) 0) (>= (cdr new-pos) 0))
                           (let* ((new-gear (change-gear gear pos new-pos))
                                  (dist (+ (gethash current distances)
                                           (if (eq gear new-gear) 1 8)))
                                  (new (cons new-pos new-gear)))
                             (when (and (< dist best)
                                        (< dist (gethash new distances most-positive-fixnum)))
                               (setf (gethash new distances) dist)
                               (push new next))))))))
                 (when next
                   (rec next)))))
      (setf (gethash '((0 . 0) . torch) distances) 0)
      (rec '(((0 . 0) . torch)))
      (gethash (cons *target* 'torch) distances))))
